apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Create a variable called keystorePropertiesFile, and initialize it to
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()

// Load keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "torille.fi.lurkforreddit"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 23
        versionName "0.8.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFile 'proguard-fresco.pro'
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-retrofit.pro'
            proguardFile 'proguard-rules.pro'
            proguardFile 'proguard-okhttp.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            testProguardFile 'proguard-test.pro'
            zipAlignEnabled true
        }
        debug {
            // Run code coverage reports by default on debug builds.
            testCoverageEnabled = true
        }
    }

    flavorDimensions "app"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
            dimension = "app"
        }
        prod {
            signingConfig signingConfigs.config
            dimension = "app"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$rootProject.ext.kotlinCoroutinesVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "nz.bradcampbell:paperparcel:$rootProject.ext.paperParcelVersion"
    kapt "nz.bradcampbell:paperparcel-compiler:$rootProject.ext.paperParcelVersion"

    // App dependencies
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:customtabs:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-core-utils:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-fragment:$rootProject.supportLibraryVersion"
    implementation "com.android.support:exifinterface:$rootProject.supportLibraryVersion"
    implementation "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintVersion"

    // Dagger dependencies
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.daggerVersion"
    implementation "com.google.dagger:dagger:$rootProject.ext.daggerVersion"
    implementation "com.google.dagger:dagger-android:$rootProject.ext.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.ext.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.daggerVersion"


    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.okHttpVersion"

    // Retrofit
    implementation("com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion") {
        // exclude Retrofitâ€™s OkHttp peer-dependency module and define your own module import
        exclude module: 'okhttp'
    }
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.retrofitVersion"

    // Fresco dependencies
    implementation "com.facebook.fresco:fresco:$rootProject.ext.frescoVersion"
    implementation "com.facebook.fresco:animated-gif:$rootProject.ext.frescoVersion"
    implementation "com.facebook.fresco:animated-webp:$rootProject.ext.frescoVersion"
    implementation ("com.facebook.fresco:imagepipeline-okhttp3:$rootProject.ext.frescoVersion"){
        exclude module: 'okhttp'
    }
    implementation "com.davemorrissey.labs:subsampling-scale-image-view:$rootProject.ext.subSamplingScaleImageViewVersion"

    // Exoplayer
    implementation "com.google.android.exoplayer:exoplayer-core:$rootProject.ext.exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$rootProject.ext.exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-dash:$rootProject.ext.exoplayerVersion"
    implementation ("com.google.android.exoplayer:extension-okhttp:$rootProject.ext.exoplayerVersion"){
        exclude module: 'okhttp'
    }

    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.ext.rxKotlinVersion"

    implementation "android.arch.persistence.room:runtime:$rootProject.ext.room"
    kapt "android.arch.persistence.room:compiler:$rootProject.ext.room"
    implementation "android.arch.persistence.room:rxjava2:$rootProject.ext.room"


    // Timber and leak canary dependencies
    implementation "com.jakewharton.timber:timber:$rootProject.ext.timberVersion"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakCanaryVersion"

    // Dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    // Espresso UI Testing dependencies.
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"

    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

}

kotlin {
    experimental {
        coroutines "enable"
    }
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    resolutionStrategy.force "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.implementation.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestImplementation.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestImplementation.exclude module: "${compileDependency.getName()}"
    }
}
